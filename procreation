#!/usr/bin/env bash

w32bit="https://bitbucket.org/rude/love/downloads/love-0.9.0-win32.zip"
w64bit="https://bitbucket.org/rude/love/downloads/love-0.9.0-win64.zip"
osx="https://bitbucket.org/rude/love/downloads/love-0.9.0-macosx-x64.zip"

w32dir=$HOME/.procreation/w32
w64dir=$HOME/.procreation/w64
osxdir=$HOME/.procreation/osx

w32app=$w32dir/love.exe
w64app=$w64dir/love.exe
osxapp=$osxdir/love.app

useCacheIfPossible=true

title="YourGame"
ident="com.$title"

function helpMessage() {
  echo ""
  echo "Usage: $0 [-bh] [-t <title>] [-n <identifier>] input target"
  echo ""
  echo "It is assumed that input will be a directory that already exists. If it doesn't, this will fail."
  echo "Target may be a directory that does not yet exist. If it doesn't, it will be created. Otherwise, it will be cleaned before use."
  echo ""
  echo "Make sure your title and identifier are not null or empty strings if passed."
  echo ""
  echo "Options:"
  echo "  -b      Bust cache: Force download of executables again."
  echo "  -h      Help; this message."
  echo "  -t      Title of the game, for the executables."
  echo "  -n      Name for Mac Bundle Identifier, e.g. com.whatever.gamename"
  echo ""
}

function dlto() {
  local file=$1
  local targ=$2
  local name=$(basename $file)
  local udir="${name%.*}"

  if [ -d $targ ]
    then
    rm -rf $targ
  fi

  curl -fsSL $file -o $targ/$name --create-dirs
  if [ -f $targ/$name ]
    then
    unzip -qq $targ/$name -d $targ/
    rm -rf $targ/$name
    # Not applicable for OSX, so make sure to only extract Windows files to parent folders
    if [ -d $targ/$udir ]
      then
      mv $targ/$udir/* $targ/
      rm -rf $targ/$udir
    fi
  fi
}

function createWindowsEXE() {
  local exeDir=$1
  local loveFile=$2
  local t=$3
  local b=$4
  local sep="_"

  t=$t$sep
  t=$t$b

  if [ -d $t ]
    then
    rm -rf $t
  fi
  mkdir $t
  cat $exeDir/love.exe $loveFile > $t/$title.exe
  cp $exeDir/DevIL.dll $t/DevIL.dll
  cp $exeDir/license.txt $t/license.txt
  cp $exeDir/love.dll $t/love.dll
  cp $exeDir/lua51.dll $t/lua51.dll
  cp $exeDir/mpg123.dll $t/mpg123.dll
  cp $exeDir/msvcp110.dll $t/msvcp110.dll
  cp $exeDir/msvcr110.dll $t/msvcr110.dll
  cp $exeDir/OpenAL32.dll $t/OpenAL32.dll
  cp $exeDir/SDL2.dll $t/SDL2.dll

  zip -9 -q -r $t $t -x "/\*.git*" -x "/\*.DS_Store" -x "\*.git*" -x "\*.DS_Store"
  rm -rf $t
}

# Flag existence of necessary executables
hasW32=false
if [ -e $w32app ]
  then
  hasW32=true
fi
hasW64=false
if [ -e $w64app ]
  then
  hasW64=true
fi
hasOSX=false
if [ -e $osxapp ]
  then
  hasOSX=true
fi

# Parse options
while getopts "bn:t:h" optchar;
  do
  case "$optchar" in
    b)
      useCacheIfPossible=false
      ;;
    t)
      title="${OPTARG}"
      if [ -z $title ]
        then
        helpMessage
        exit 1
      fi
      ;;
    n)
      ident="${OPTARG}"
      if [ -z $ident ]
        then
        helpMessage
        exit 1
      fi
      ;;
    h)
      helpMessage
      exit 2
      ;;
  esac
done

n=1
while [ $# -gt 0 ]
  do
  if [ $n -lt $OPTIND ]
    then
    let n=$n+1
    shift
  else
    break;
  fi
done

# Reset flags if using bust cache option
if [ $useCacheIfPossible = false ]
  then
  hasW32=false
  hasW64=false
  hasOSX=false
fi

tmpinput=$1
tmptarget=$2

# Ensure necessary input and target
if [ -z $tmpinput ] || [ -z $tmptarget ]
  then
  helpMessage
  exit 1
fi

if [ ! -d $tmpinput ]
  then
  echo ""
  echo "Please make sure that the input directory you passed exists."
  echo ""
  exit 1
fi

if [ $(echo $tmpinput | grep \/$) ]
  then
  input="${tmpinput%/*}"
else
  input=$tmpinput
fi

if [ $(echo $tmptarget | grep \/$) ]
  then
  target="${tmptarget%/*}"
else
  target=$tmptarget
fi

# Executable downloading
if [ $hasW32 = false ]
  then
  dlto $w32bit $w32dir
fi

if [ $hasW64 = false ]
  then
  dlto $w64bit $w64dir
fi

if [ $hasOSX = false ]
  then
  dlto $osx $osxdir
fi

# Clean $input/bin/ if needed
if [ -d $target ]
  then
  rm -rf $target
fi
mkdir $target

# Create .love
lastDir=$(pwd)
cd $input
zip -9 -q -r $target/$title.love . -x "/\*.git*" -x "/\*.DS_Store" -x "\*.git*" -x "\*.DS_Store"
cd $lastDir

# Create executables using .love created
#cat love.exe SuperGame.love > SuperGame.exe
lastDir=$(pwd)
cd $target
createWindowsEXE $w32dir $title.love $title 32
createWindowsEXE $w64dir $title.love $title 64

cp -r $osxapp .
mv love.app $title.app
cp $title.love $title.app/Contents/Resources/$title.love
cp $title.app/Contents/Info.plist .
# Only rename CFBundleName and CFBundleIdentifier
sed "s~LOÌˆVE<~$title<~" Info.plist > Info2.plist
sed "s~org.love2d.love<~$ident<~" Info2.plist > $title.app/Contents/Info.plist
rm -rf Info.plist
rm -rf Info2.plist
chmod a+x $title.app
cd $lastDir
